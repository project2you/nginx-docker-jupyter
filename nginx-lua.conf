##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# https://www.nginx.com/resources/wiki/start/
# https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/
# https://wiki.debian.org/Nginx/DirectoryStructure
#
# In most cases, administrators will remove this file from sites-enabled/ and
# leave it as reference inside of sites-available where it will continue to be
# updated by the nginx packaging team.
#
# This file will automatically load configuration files provided by other
# applications, such as Drupal or Wordpress. These applications will be made
# available underneath a path with that package name, such as /drupal8.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# Default server configuration
#
server {
        listen 80 default_server;
        listen [::]:80 default_server;

        # SSL configuration
        #
        # listen 443 ssl default_server;
        # listen [::]:443 ssl default_server;
        #
        # Note: You should disable gzip for SSL traffic.
        # See: https://bugs.debian.org/773332
        #
        # Read up on ssl_ciphers to ensure a secure configuration.
        # See: https://bugs.debian.org/765782
        #
        # Self signed certs generated by the ssl-cert package
        # Don't use them in a production server!
        #
        # include snippets/snakeoil.conf;

        root /var/www/html;

        # Add index.php to the list if you are using PHP
        index info.php;

        server_name _;

        location ~ \.php$ {
           include snippets/fastcgi-php.conf;
           fastcgi_pass unix:/run/php/php7.4-fpm.sock;
        }


        location / {
                # First attempt to serve request as file, then
                # as directory, then fall back to displaying a 404.
                try_files $uri $uri/ =404;
        }

       location /test {

          rewrite_by_lua '
          local httpc = require("resty.http").new()
          local query_string = ngx.req.get_uri_args()
          ngx.say(query_string["name"])

          ';
       }

        location /hello {
            default_type text/html;
            content_by_lua '
                ngx.say("<p>hello, world</p>")
            ';
        }


       location /proxy {
         proxy_pass http://192.168.1.201:5001/;
       }

       location /ip {
          set $proxy "";

          rewrite_by_lua '
          local httpc = require("resty.http").new()
          local query_string = ngx.req.get_uri_args()

          local ip = string.format("/?ip=%s",query_string["myip"])

          -- Single-shot requests use the `request_uri` interface.
          local res, err = httpc:request_uri("http://192.168.1.201:5000", {
            method = "POST",
            path = ip,
            headers = {
              ["Content-Type"] = "application/x-www-form-urlencoded",
            },
         })
        if not res then
           ngx.log(ngx.ERR, "request failed: ", err)
          return
        end

        local status = res.status
        local length = res.headers["Content-Length"]
        local body   = res.body
        ngx.var.proxy = res.body
        ';

        proxy_pass http://$proxy:5001;

       }

        # pass PHP scripts to FastCGI server
        #
        #location ~ \.php$ {
        #       include snippets/fastcgi-php.conf;
        #
        #       # With php-fpm (or other unix sockets):
        #       fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;
        #       # With php-cgi (or other tcp sockets):
        #       fastcgi_pass 127.0.0.1:9000;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #       deny all;
        #}
}


